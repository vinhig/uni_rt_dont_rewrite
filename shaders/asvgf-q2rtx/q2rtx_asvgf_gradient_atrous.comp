/*
Copyright (C) 2018 Christoph Schied
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// ========================================================================== //
// This is the a-trous wavelet filter for the lighting gradients, all channels.
//
// See `asvgf.glsl` for general information about denoisers in Q2RTX.
// ========================================================================== //

#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(push_constant, std140) uniform IterationInfo {
	uint iteration;
} push;

#define GLOBAL_UBO_DESC_SET_IDX 0
#include "global_ubo.h"

#define GLOBAL_TEXTURES_DESC_SET_IDX 1
#include "global_textures.h"

#include "utils.glsl"
#include "asvgf.glsl"


// Blur the gradients
vec2
filter_image(sampler2D img)
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	ivec2 grad_size = ivec2(global_ubo.current_gpu_slice_width, global_ubo.height) / GRAD_DWN;

	vec2 color_center = texelFetch(img, ipos, 0).xy;
	
	float sum_w = 1;
	
	const int step_size = int(1u << push.iteration);

	vec2 sum_color = vec2(0);
	sum_w = 0;

	const int r = 1;
	for(int yy = -r; yy <= r; yy++) {
		for(int xx = -r; xx <= r; xx++) {
			ivec2 p = ipos + ivec2(xx, yy) * step_size;

			vec2  c = texelFetch(img, p, 0).xy;
			
			if(any(greaterThanEqual(p, grad_size)))
				c = vec2(0);

			float w = wavelet_kernel[abs(xx)][abs(yy)];
			
			sum_color += c * w;
			sum_w += w;
		}
	}

	sum_color /= sum_w;

	return sum_color;
}

// LF gradients are not normalized in the gradient_img shader - do it after the blur
float get_gradient(float l_curr, float l_prev)
{
	float l_max = max(l_curr, l_prev);

	if(l_max == 0)
		return 0;

	float grad = abs(l_curr - l_prev) / l_max;
	return grad * grad;
}

void
main()
{
	ivec2 ipos = ivec2(gl_GlobalInvocationID);
	ivec2 grad_size = ivec2(global_ubo.current_gpu_slice_width, global_ubo.height) / GRAD_DWN;
	if(any(greaterThanEqual(ipos, grad_size)))
		return;

	vec2 filtered_lf = vec2(0);
	vec2 filtered_hf_spec = vec2(0);
	switch(push.iteration) {
	case 0: filtered_lf = filter_image(TEX_ASVGF_GRAD_LF_PING); filtered_hf_spec = filter_image(TEX_ASVGF_GRAD_HF_SPEC_PING); break;
	case 1: filtered_lf = filter_image(TEX_ASVGF_GRAD_LF_PONG); filtered_hf_spec = filter_image(TEX_ASVGF_GRAD_HF_SPEC_PONG); break;
	case 2: filtered_lf = filter_image(TEX_ASVGF_GRAD_LF_PING); filtered_hf_spec = filter_image(TEX_ASVGF_GRAD_HF_SPEC_PING); break;
	case 3: filtered_lf = filter_image(TEX_ASVGF_GRAD_LF_PONG); break;
	case 4: filtered_lf = filter_image(TEX_ASVGF_GRAD_LF_PING); break;
	case 5: filtered_lf = filter_image(TEX_ASVGF_GRAD_LF_PONG); break;
	case 6: 
		filtered_lf = filter_image(TEX_ASVGF_GRAD_LF_PING); 
		filtered_lf.x = get_gradient(filtered_lf.x, filtered_lf.y);
		filtered_lf.y = 0;
		break;
	}

	switch(push.iteration) {
	case 0: imageStore(IMG_ASVGF_GRAD_LF_PONG, ipos, vec4(filtered_lf, 0, 0)); imageStore(IMG_ASVGF_GRAD_HF_SPEC_PONG, ipos, vec4(filtered_hf_spec, 0, 0)); break;
	case 1: imageStore(IMG_ASVGF_GRAD_LF_PING, ipos, vec4(filtered_lf, 0, 0)); imageStore(IMG_ASVGF_GRAD_HF_SPEC_PING, ipos, vec4(filtered_hf_spec, 0, 0)); break;
	case 2: imageStore(IMG_ASVGF_GRAD_LF_PONG, ipos, vec4(filtered_lf, 0, 0)); imageStore(IMG_ASVGF_GRAD_HF_SPEC_PONG, ipos, vec4(filtered_hf_spec, 0, 0)); break;
	case 3: imageStore(IMG_ASVGF_GRAD_LF_PING, ipos, vec4(filtered_lf, 0, 0)); break;
	case 4: imageStore(IMG_ASVGF_GRAD_LF_PONG, ipos, vec4(filtered_lf, 0, 0)); break;
	case 5: imageStore(IMG_ASVGF_GRAD_LF_PING, ipos, vec4(filtered_lf, 0, 0)); break;
	case 6: imageStore(IMG_ASVGF_GRAD_LF_PONG, ipos, vec4(filtered_lf, 0, 0)); break;
	}
}

